<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="0136d24e-4785-4314-a628-69c5c3d711e6" name="Default Changelist" comment="">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/zenzen/core.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/zenzen/core.clj" afterDir="false" />
    </list>
    <ignored path="$PROJECT_DIR$/out/" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileEditorManager">
    <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
      <file pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/src/zenzen/core.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="491">
              <caret line="103" selection-start-line="103" selection-end-line="107" selection-end-column="39" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/resources/DN/Elf/Darkness/Mara/black mara/Argenta.txt">
          <provider selected="true" editor-type-id="text-editor">
            <state>
              <caret column="41" selection-start-column="41" selection-end-column="41" />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/resources/DN/Elf/Darkness/Mara/black mara/Argenta.txt" />
        <option value="$PROJECT_DIR$/src/zenzen/core.clj" />
      </list>
    </option>
  </component>
  <component name="ProjectConfigurationFiles">
    <option name="files">
      <list>
        <option value="$PROJECT_DIR$/.idea/ClojureProjectResolveSettings.xml" />
      </list>
    </option>
  </component>
  <component name="ProjectFrameBounds">
    <option name="y" value="23" />
    <option name="width" value="1440" />
    <option name="height" value="826" />
  </component>
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectView">
    <navigator proportions="" version="1">
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="PackagesPane" />
      <pane id="Scope" />
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="Zen-zen" type="b2602c69:ProjectViewProjectNode" />
              <item name="Zen-zen" type="462c0819:PsiDirectoryNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
    <property name="settings.editor.selected.configurable" value="preferences.lookFeel" />
  </component>
  <component name="ReplState" timestamp="1556387154884">{:repl-history {:ide [], :local [{:command &quot;(lines-reducible hub b)&quot;, :offset 23, :ns &quot;zenzen.core&quot;} {:command &quot;(lines-reducible 1 b)&quot;, :offset 21, :ns &quot;zenzen.core&quot;} {:command &quot;(defn lines-reducible\n  [^java.io.BufferedReader rdr]\n  (reify clojure.lang.IReduceInit\n    (reduce [this f init]\n      (try\n        (loop [state init]\n          (if (reduced? state)\n            @state\n            (if-let [line (.readLine rdr)]\n              (recur (f state line))\n              state)))\n        (finally\n          (.close rdr))))))\n&quot;, :offset 350, :ns &quot;zenzen.core&quot;} {:command &quot;(lines-reducible b)&quot;, :offset 19, :ns &quot;zenzen.core&quot;} {:command &quot;(defn parse-json-file-reducible [file]\n  (eduction (map #(json/decode % true))\n            (lines-reducible (io/reader file))))&quot;, :offset 127, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt; a\n    slurp\n    (clojure.string/replace #\&quot;\\d\&quot; \&quot;\&quot;)\n    clojure.string/split-lines)&quot;, :offset 85, :ns &quot;zenzen.core&quot;} {:command &quot;(defn mapping\n  [main-path]\n  (-&gt;&gt;\n    (get-path main-path)\n    (map #(clojure.string/split % #\&quot;/\&quot;))&quot;, :offset 100, :ns &quot;zenzen.core&quot;} {:command &quot;(defn mapping\n  [main-path]\n  (-&gt;&gt;\n    (get-path main-path)\n    (map #(clojure.string/split % #\&quot;/\&quot;))))&quot;, :offset 102, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt; a\n    (get-path)\n    (map #(clojure.string/split % #\&quot;/\&quot;)))&quot;, :offset 63, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt; b\n    (get-path)\n    (map #(clojure.string/split % #\&quot;/\&quot;)))&quot;, :offset 63, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt; \&quot;./resources/DN\&quot;\n     (get-path)\n     (filter #(= 5 ((frequencies %) \\/)))\n     (map #(slurp %)))&quot;, :offset 102, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt; \&quot;./resources/DN\&quot;\n     (get-path)\n     (filter #(= 5 ((frequencies %) \\/)))\n     )&quot;, :offset 86, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt; \&quot;./resources/DN\&quot;\n     (get-path)\n     (filter #(= 7 ((frequencies %) \\/)))\n     (map #(slurp %)))&quot;, :offset 102, :ns &quot;zenzen.core&quot;} {:command &quot;\n(-&gt; a\n    slurp\n    (clojure.string/replace #\&quot;\\d\&quot; \&quot;\&quot;)\n    clojure.string/split-lines)&quot;, :offset 86, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt; \&quot;./resources/DN\&quot;\n     (get-path)\n     (filter #(= 7 ((frequencies %) \\/)))\n     )&quot;, :offset 86, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt; \&quot;./resources/DN\&quot;\n     (get-path)\n     (filter #(= 7 ((frequencies %) \\/)))\n     coba)&quot;, :offset 90, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt; \&quot;./resources/DN\&quot;\n     (get-path)\n     (filter #(= 7 ((frequencies %) \\/)))\n     (map #(coba %))\n     (map #(zipmap % (:a))))&quot;, :offset 129, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt; \&quot;./resources/DN\&quot;\n     (get-path)\n     (filter #(= 7 ((frequencies %) \\/)))\n     (map #(coba %))\n     (map #(zipmap % (repeat :a))))&quot;, :offset 136, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt; \&quot;./resources/DN\&quot;\n     (get-path)\n     (filter #(= 7 ((frequencies %) \\/)))\n     (map #(coba %))\n     (map #(zipmap % (repeat :soal))))&quot;, :offset 139, :ns &quot;zenzen.core&quot;} {:command &quot;(def c [\&quot;Master Sorceress Stella is an experienced Sorceress who resides in Saint Haven. She has great interest in real estate investment, but hasn't made much profit from it.\&quot;\n        \&quot;\&quot;\n        \&quot;She is always conducting strange experiments that annoy others around her. \&quot;])&quot;, :offset 275, :ns &quot;zenzen.core&quot;} {:command &quot;(read_txt a)&quot;, :offset 12, :ns &quot;zenzen.core&quot;} {:command &quot;(def b\n  \&quot;./resources\&quot;)&quot;, :offset 23, :ns &quot;zenzen.core&quot;} {:command &quot;(read_txt b)&quot;, :offset 12, :ns &quot;zenzen.core&quot;} {:command &quot;(read_txt \&quot;./resources/DN\&quot;)&quot;, :offset 27, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt; \&quot;./resources/DN\&quot;\n     (get-path)\n     (filter #(= 7 ((frequencies %) \\/)))\n     (map #(read_txt %)))&quot;, :offset 105, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt; \&quot;./resources/DN\&quot;\n     (get-path)\n     (filter #(= 7 ((frequencies %) \\/)))\n     (map #(read_a %)))&quot;, :offset 103, :ns &quot;zenzen.core&quot;} {:command &quot;(str c)&quot;, :offset 7, :ns &quot;zenzen.core&quot;} {:command &quot;(require '[clojure.string :as string])&quot;, :offset 38, :ns &quot;zenzen.core&quot;} {:command &quot;(remove string.blank? c)&quot;, :offset 24, :ns &quot;zenzen.core&quot;} {:command &quot;(remove string/blank? c)&quot;, :offset 24, :ns &quot;zenzen.core&quot;} {:command &quot;(string/join (remove string/blank? c))&quot;, :offset 38, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt; \&quot;./resources/DN\&quot;\n     (get-path)\n     (filter #(= 7 ((frequencies %) \\/)))\n     (map #(coba %)))&quot;, :offset 101, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt; \&quot;./resources/DN\&quot;\n     (get-path)\n     (filter #(= 7 ((frequencies %) \\/)))\n     (map #(string/join \&quot; \&quot; (remove string/blank? %))))&quot;, :offset 135, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt; \&quot;./resources/DN\&quot;\n     (get-path)\n     (filter #(= 7 ((frequencies %) \\/)))\n     (map #(coba %))\n     (map #(string/join \&quot; \&quot; (remove string/blank? %)))\n     (map #(zipmap % (repeat :a))))&quot;, :offset 191, :ns &quot;zenzen.core&quot;} {:command &quot;(defn coba\n  [a]\n  (-&gt; a\n      slurp\n      (clojure.string/replace #\&quot;\\d\&quot; \&quot;\&quot;)\n      clojure.string/split-lines))&quot;, :offset 111, :ns &quot;zenzen.core&quot;} {:command &quot;(coba b)&quot;, :offset 8, :ns &quot;zenzen.core&quot;} {:command &quot;(into [] \&quot;asad\&quot; \&quot;ada\&quot;)&quot;, :offset 22, :ns &quot;zenzen.core&quot;} {:command &quot;(into [] \&quot;asad\&quot;)&quot;, :offset 16, :ns &quot;zenzen.core&quot;} {:command &quot;(into [] '(\&quot;Asa\&quot; \&quot;ajaf\&quot;))&quot;, :offset 25, :ns &quot;zenzen.core&quot;} {:command &quot;(map (into [] '(\&quot;adad\&quot; \&quot;Afa\&quot;)))&quot;, :offset 31, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt;\n  '(\&quot;adaf\&quot; \&quot;sfnaj\&quot;)\n  (map #(into [])))&quot;, :offset 44, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt;\n  '(\&quot;adaf\&quot; \&quot;sfnaj\&quot;)\n  (map #(into [] %)))&quot;, :offset 46, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt;\n  '(\&quot;adaf\&quot; \&quot;sfnaj\&quot;)\n  (map #(into [] %))\n  (join))&quot;, :offset 55, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt;\n  '(\&quot;adaf\&quot; \&quot;sfnaj\&quot;)\n  (map #(into [] %))\n  (str))&quot;, :offset 54, :ns &quot;zenzen.core&quot;} {:command &quot;(apply str c)&quot;, :offset 13, :ns &quot;zenzen.core&quot;} {:command &quot;(time (do (join-reduce (repeat 50000 c))\n          nil))&quot;, :offset 56, :ns &quot;zenzen.core&quot;} {:command &quot;(defn join-apply [strings] (apply str strings))&quot;, :offset 47, :ns &quot;zenzen.core&quot;} {:command &quot;(time (do (join-apply (repeat 50000 c))\n          nil))&quot;, :offset 55, :ns &quot;zenzen.core&quot;} {:command &quot;(defn coba [c]\n  (string/join \&quot; \&quot; (remove string/blank? c)))&quot;, :offset 60, :ns &quot;zenzen.core&quot;} {:command &quot;(time (do (coba (repeat 50000 c))\n          nil))&quot;, :offset 49, :ns &quot;zenzen.core&quot;} {:command &quot;(use 'clojure.java.io)\n(require '[clojure.string :as string])&quot;, :offset 61, :ns &quot;zenzen.core&quot;} {:command &quot;(def asa\n  (-&gt;&gt; \&quot;resources/Seal\&quot;\n       clojure.java.io/file\n       .list\n       seq\n       ))&quot;, :offset 94, :ns &quot;zenzen.core&quot;} {:command &quot;asa&quot;, :offset 3, :ns &quot;zenzen.core&quot;} {:command &quot;(asa)&quot;, :offset 5, :ns &quot;zenzen.core&quot;} {:command &quot;(def a\n  \&quot;./resources/DN/Elf/Darkness/Mara/black mara/Argenta.txt\&quot;)\n\n(def b\n  \&quot;./resources\&quot;)&quot;, :offset 92, :ns &quot;zenzen.core&quot;} {:command &quot;a&quot;, :offset 1, :ns &quot;zenzen.core&quot;} {:command &quot;b&quot;, :offset 1, :ns &quot;zenzen.core&quot;} {:command &quot;(def c\n  [\&quot;Master Sorceress Stella is an experienced Sorceress who resides in Saint Haven. She has great interest in real estate investment, but hasn't made much profit from it.\&quot;\n   \&quot;\&quot;\n   \&quot;She is always conducting strange experiments that annoy others around her. \&quot;])&quot;, :offset 267, :ns &quot;zenzen.core&quot;} {:command &quot;(string/join \&quot; \&quot; (remove string/blank? c))&quot;, :offset 42, :ns &quot;zenzen.core&quot;} {:command &quot;(defn get-path\n  [path]\n  (map #(.getPath %)\n       (file-seq (clojure.java.io/file path))))\n\n;; ambil data tiap file\n(-&gt;&gt; \&quot;./resources/DN\&quot;\n     (get-path)\n     (filter #(= 5 ((frequencies %) \\/)))\n     (map #(slurp %)))\n\n(defn read_txt\n  [full_path]\n  (with-open [rdr (reader full_path)]\n    (doseq [line (line-seq rdr)]\n      (println line))))\n\n(defn mapping\n  [main-path]\n  (-&gt;&gt;\n    (get-path main-path)\n    (map #(clojure.string/split % #\&quot;/\&quot;))\n    (map #(drop 2 %))\n    (filter #(= (count %) 4))\n    (map #(zipmap % '(:a :b :c :d)))\n    (map #(clojure.set/map-invert %))))\n\n(mapping \&quot;./resources/DN\&quot;)\n\n;; effective way\n(-&gt;&gt; \&quot;./resources/DN\&quot;\n     (get-path)\n     (filter #(= 7 ((frequencies %) \\/)))\n     )\n\n(defn coba\n  [a]\n  (-&gt; a\n      slurp\n      (clojure.string/replace #\&quot;\\d\&quot; \&quot;\&quot;)\n      clojure.string/split-lines))\n&quot;, :offset 823, :ns &quot;zenzen.core&quot;} {:command &quot;(coba a)&quot;, :offset 8, :ns &quot;zenzen.core&quot;} {:command &quot;(coba c)&quot;, :offset 8, :ns &quot;zenzen.core&quot;} {:command &quot;c&quot;, :offset 1, :ns &quot;zenzen.core&quot;} {:command &quot;(mapping \&quot;b\&quot;)&quot;, :offset 13, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt; \&quot;./resources/DN\&quot;\n     (get-path)\n     (filter #(= 7 ((frequencies %) \\/)))\n     (map #(coba %))\n     (map #(string/join \&quot; \&quot; (remove string/blank? %))))&quot;, :offset 156, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt; \&quot;./resources/DN\&quot;\n     (get-path)\n     (filter #(= 7 ((frequencies %) \\/)))\n     (map #(coba %))\n     (map #(string/join \&quot; \&quot; (remove string/blank? %)))\n     (map #(zipmap % '(:a))))&quot;, :offset 185, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt; \&quot;./resources/DN\&quot;\n     (get-path)\n     (filter #(= 7 ((frequencies %) \\/)))\n     (map #(coba %))\n     (map #(string/join \&quot; \&quot; (remove string/blank? %)))\n     )&quot;, :offset 162, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt; \&quot;./resources/DN\&quot;\n     (get-path)\n     (filter #(= 7 ((frequencies %) \\/)))\n     (map #(coba %))\n     (map #(string/join \&quot; \&quot; (remove string/blank? %)))\n     (into {}))&quot;, :offset 171, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt; \&quot;./resources/DN\&quot;\n     (get-path)\n     (filter #(= 7 ((frequencies %) \\/)))\n     (map #(coba %))\n     (map #(string/join \&quot; \&quot; (remove string/blank? %)))\n     (map #(into {} %)))&quot;, :offset 180, :ns &quot;zenzen.core&quot;} {:command &quot;(take 10 (repeat :a))&quot;, :offset 21, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt; \&quot;./resources/DN\&quot;\n     (get-path)\n     (filter #(= 7 ((frequencies %) \\/)))\n     (map #(coba %))\n     (map #(string/join \&quot; \&quot; (remove string/blank? %)))\n     (apply assoc {}\n            (interleave (repeat :a) %)))&quot;, :offset 217, :ns &quot;zenzen.core&quot;} {:command &quot;(def value\n  (-&gt;&gt; \&quot;./resources/DN\&quot;\n       (get-path)\n       (filter #(= 7 ((frequencies %) \\/)))\n       (map #(coba %))\n       (map #(string/join \&quot; \&quot; (remove string/blank? %)))\n       ))v&quot;, :offset 187, :ns &quot;zenzen.core&quot;} {:command &quot;value&quot;, :offset 5, :ns &quot;zenzen.core&quot;} {:command &quot;(repeat 10 a)&quot;, :offset 13, :ns &quot;zenzen.core&quot;} {:command &quot;(repeat 10 :a)&quot;, :offset 14, :ns &quot;zenzen.core&quot;} {:command &quot;(apply assoc {}\n       (interleave (repeat :a)\n                   [\&quot;grape\&quot; \&quot;red\&quot; \&quot;hot\&quot;]))&quot;, :offset 89, :ns &quot;zenzen.core&quot;} {:command &quot;(apply into {}\n       (interleave (repeat :a)\n                   [\&quot;grape\&quot; \&quot;red\&quot; \&quot;hot\&quot;]))&quot;, :offset 88, :ns &quot;zenzen.core&quot;} {:command &quot;(apply assoc\n       (interleave (repeat 4 :a)\n                   [\&quot;grape\&quot; \&quot;red\&quot; \&quot;hot\&quot;]))&quot;, :offset 88, :ns &quot;zenzen.core&quot;} {:command &quot;(apply assoc {}\n       (interleave (repeat 4 :a)\n                   [\&quot;grape\&quot; \&quot;red\&quot; \&quot;hot\&quot;]))&quot;, :offset 91, :ns &quot;zenzen.core&quot;} {:command &quot;(apply assoc {}\n       (interleave [:fruit :color :temp]\n                   [\&quot;grape\&quot; \&quot;red\&quot; \&quot;hot\&quot;]))&quot;, :offset 99, :ns &quot;zenzen.core&quot;} {:command &quot;(apply assoc {}\n       (interleave [:a :a :a]\n                   [\&quot;grape\&quot; \&quot;red\&quot; \&quot;hot\&quot;]))&quot;, :offset 88, :ns &quot;zenzen.core&quot;} {:command &quot;(zipmap (repeat :a [\&quot;grape\&quot; \&quot;red\&quot;]))&quot;, :offset 36, :ns &quot;zenzen.core&quot;} {:command &quot;(zipmap (repeat :a) [\&quot;greap\&quot; \&quot;red\&quot;])&quot;, :offset 36, :ns &quot;zenzen.core&quot;} {:command &quot;(zipmap (repeat 2 :a) [\&quot;greap\&quot; \&quot;red\&quot;])&quot;, :offset 38, :ns &quot;zenzen.core&quot;} {:command &quot;(zipmap [:a :b] [\&quot;greap\&quot; \&quot;red\&quot;])&quot;, :offset 32, :ns &quot;zenzen.core&quot;} {:command &quot;(map #(zipmap [:a :b] [\&quot;greap\&quot; \&quot;red\&quot;]))&quot;, :offset 39, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt;\n  '(\&quot;grape\&quot; \&quot;red\&quot;)\n  (map #(zipmap % (repeat :a))))&quot;, :offset 56, :ns &quot;zenzen.core&quot;} {:command &quot;(mappng \&quot;,/resources/DN\&quot;)&quot;, :offset 25, :ns &quot;zenzen.core&quot;} {:command &quot;(mapping \&quot;,/resources/DN\&quot;)&quot;, :offset 26, :ns &quot;zenzen.core&quot;} {:command &quot;(mapping \&quot;./resources/DN\&quot;)&quot;, :offset 26, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt; \&quot;./resources/DN\&quot;\n    (get-path main-path)\n    (map #(clojure.string/split % #\&quot;/\&quot;))\n    (map #(drop 2 %))\n    (filter #(= (count %) 4))\n    (map #(zipmap % '(:a :b :c :d)))\n    (map #(clojure.set/map-invert %)))&quot;, :offset 215, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt; \&quot;./resources/DN\&quot;\n    (get-path)\n    (map #(clojure.string/split % #\&quot;/\&quot;))\n    (map #(drop 2 %))\n    (filter #(= (count %) 4))\n    )&quot;, :offset 135, :ns &quot;zenzen.core&quot;} {:command &quot;(into '() [\&quot;grape\&quot; \&quot;apple\&quot;])&quot;, :offset 28, :ns &quot;zenzen.core&quot;} {:command &quot;(map %(into '() [\&quot;grape\&quot; \&quot;apple\&quot;]))&quot;, :offset 35, :ns &quot;zenzen.core&quot;} {:command &quot;(map #(into '() [\&quot;grape\&quot; \&quot;apple\&quot;]))&quot;, :offset 35, :ns &quot;zenzen.core&quot;} {:command &quot;(map #(into '() %) [\&quot;grape\&quot; \&quot;red\&quot;])&quot;, :offset 35, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt; \&quot;./resources/DN\&quot;\n    (get-path)\n    (map #(clojure.string/split % #\&quot;/\&quot;))\n    (map #(drop 2 %))\n    (filter #(= (count %) 4))\n    (map #(zipmap % '(:a :b :c :d)))\n    (map #(clojure.set/map-invert %)))&quot;, :offset 205, :ns &quot;zenzen.core&quot;} {:command &quot;(for [x (repeat :a)\n      y '(\&quot;grape\&quot; \&quot;red\&quot;)]\n  {x y})&quot;, :offset 54, :ns &quot;zenzen.core&quot;} {:command &quot;(for [x ['a 'b 'c]\n      y [1 2 3]]\n  [x y])&quot;, :offset 44, :ns &quot;zenzen.core&quot;} {:command &quot;(+ 3 2)&quot;, :offset 7, :ns &quot;zenzen.core&quot;}], :remote []}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager">
    <configuration name="Unnamed" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false" nameIsGenerated="true">
      <module name="zenzen" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <module name="" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="0" />
      <module name="" />
      <method v="2" />
    </configuration>
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="0136d24e-4785-4314-a628-69c5c3d711e6" name="Default Changelist" comment="" />
      <created>1555928694217</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1555928694217</updated>
    </task>
    <servers />
  </component>
  <component name="ToolWindowManager">
    <frame x="0" y="23" width="1440" height="826" extended-state="0" />
    <layout>
      <window_info content_ui="combo" id="Project" order="0" visible="true" weight="0.15879828" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info id="Image Layers" order="2" />
      <window_info id="Designer" order="3" />
      <window_info id="UI Designer" order="4" />
      <window_info id="Capture Tool" order="5" />
      <window_info id="Favorites" order="6" side_tool="true" />
      <window_info anchor="bottom" id="Message" order="0" />
      <window_info anchor="bottom" id="Find" order="1" />
      <window_info anchor="bottom" id="Run" order="2" />
      <window_info anchor="bottom" id="Debug" order="3" weight="0.4" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="6" />
      <window_info anchor="bottom" id="Terminal" order="7" />
      <window_info anchor="bottom" id="Event Log" order="8" side_tool="true" weight="0.32729805" />
      <window_info anchor="bottom" id="Version Control" order="9" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
      <window_info anchor="right" id="Palette" order="3" />
      <window_info anchor="right" id="Maven" order="4" />
      <window_info anchor="right" id="Theme Preview" order="5" />
      <window_info active="true" anchor="right" id="REPL" order="6" sideWeight="0.94986075" side_tool="true" visible="true" weight="0.3297568" />
      <window_info anchor="right" id="Leiningen" order="7" sideWeight="0.050139274" weight="0.3297568" />
      <window_info anchor="right" id="Capture Analysis" order="8" />
      <window_info anchor="right" id="Palette&#9;" order="9" />
    </layout>
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$PROJECT_DIR$/resources/DN/Elf/Darkness/Mara/black mara/Argenta.txt">
      <provider selected="true" editor-type-id="text-editor">
        <state>
          <caret column="41" selection-start-column="41" selection-end-column="41" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/zenzen/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="491">
          <caret line="103" selection-start-line="103" selection-end-line="107" selection-end-column="39" />
        </state>
      </provider>
    </entry>
  </component>
  <component name="masterDetails">
    <states>
      <state key="ProjectJDKs.UI">
        <settings>
          <last-edited>12</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
    </states>
  </component>
</project>