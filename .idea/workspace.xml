<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="0136d24e-4785-4314-a628-69c5c3d711e6" name="Default Changelist" comment="">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/data.clj" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/src/zenzen/core.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/zenzen/core.clj" afterDir="false" />
    </list>
    <ignored path="$PROJECT_DIR$/out/" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="DefaultGradleProjectSettings">
    <option name="testRunner" value="GRADLE" />
    <option name="delegatedBuild" value="true" />
  </component>
  <component name="FileEditorManager">
    <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
      <file pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/src/zenzen/core.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="125">
              <caret line="107" column="22" selection-start-line="107" selection-start-column="22" selection-end-line="107" selection-end-column="22" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/data.edn">
          <provider selected="true" editor-type-id="text-editor" />
        </entry>
      </file>
    </leaf>
  </component>
  <component name="FindInProjectRecents">
    <findStrings>
      <find>get-path</find>
      <find>coba</find>
      <find>cob</find>
      <find>baal</find>
    </findStrings>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/resources/DN/Elf/Darkness/Mara/black mara/Argenta.txt" />
        <option value="$PROJECT_DIR$/src/zenzen/core.clj" />
      </list>
    </option>
  </component>
  <component name="ProjectConfigurationFiles">
    <option name="files">
      <list>
        <option value="$PROJECT_DIR$/.idea/ClojureProjectResolveSettings.xml" />
      </list>
    </option>
  </component>
  <component name="ProjectFrameBounds" fullScreen="true">
    <option name="width" value="1440" />
    <option name="height" value="900" />
  </component>
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectView">
    <navigator proportions="" version="1">
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="PackagesPane" />
      <pane id="Scope" />
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="Zen-zen" type="b2602c69:ProjectViewProjectNode" />
              <item name="Zen-zen" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="Zen-zen" type="b2602c69:ProjectViewProjectNode" />
              <item name="Zen-zen" type="462c0819:PsiDirectoryNode" />
              <item name="resources" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="Zen-zen" type="b2602c69:ProjectViewProjectNode" />
              <item name="Zen-zen" type="462c0819:PsiDirectoryNode" />
              <item name="resources" type="462c0819:PsiDirectoryNode" />
              <item name="DN" type="462c0819:PsiDirectoryNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
    <property name="settings.editor.selected.configurable" value="reference.settings.project.maven.repository.indices" />
  </component>
  <component name="ReplState" timestamp="1557137894973">{:repl-history {:ide [], :local [{:command &quot;(zipmap d (repeat :soal))&quot;, :offset 25, :ns &quot;zenzen.core&quot;} {:command &quot;\n  (-&gt;&gt; \&quot;./resources/DN\&quot;\n       (get-path)\n       (filter #(= 7 ((frequencies %) \\/)))\n       (map #(coba %))\n       (map #(string/join \&quot; \&quot; (remove string/blank? %)))\n       (map vector) ;;baal\n       )&quot;, :offset 202, :ns &quot;zenzen.core&quot;} {:command &quot;\n  (-&gt;&gt; \&quot;./resources/DN\&quot;\n       (get-path)\n       (filter #(= 7 ((frequencies %) \\/)))\n       (map #(coba %))\n       (map #(string/join \&quot; \&quot; (remove string/blank? %)))\n       (map vector) ;;baal\n       (zipmap % (repeat :soal)))&quot;, :offset 227, :ns &quot;zenzen.core&quot;} {:command &quot;\n  (-&gt;&gt; \&quot;./resources/DN\&quot;\n       (get-path)\n       (filter #(= 7 ((frequencies %) \\/)))\n       (map #(coba %))\n       (map #(string/join \&quot; \&quot; (remove string/blank? %)))\n       (map vector) ;;baal\n       (zipmap (repeat :soal)))&quot;, :offset 225, :ns &quot;zenzen.core&quot;} {:command &quot;\n  (-&gt;&gt; \&quot;./resources/DN\&quot;\n       (get-path)\n       (filter #(= 7 ((frequencies %) \\/)))\n       (map #(coba %))\n       (map #(string/join \&quot; \&quot; (remove string/blank? %)))\n       (map vector) ;;baal\n       (map #(zipmap % (repeat :soal))))&quot;, :offset 234, :ns &quot;zenzen.core&quot;} {:command &quot;(def amir\n  (-&gt;&gt; \&quot;./resources/DN\&quot;\n       (get-path)\n       (filter #(= 7 ((frequencies %) \\/)))\n       (map #(coba %))\n       (map #(string/join \&quot; \&quot; (remove string/blank? %)))\n       (map vector)                                         ;;baal\n       (map #(zipmap % (repeat :soal)))))&quot;, :offset 284, :ns &quot;zenzen.core&quot;} {:command &quot;(def amir\n  (-&gt;&gt; \&quot;./resources/DN\&quot;\n       (get-path)\n       (filter #(= 7 ((frequencies %) \\/)))\n       (map #(coba %))\n       (map #(string/join \&quot; \&quot; (remove string/blank? %)))\n       (map vector)                                         ;;baal\n       (map #(zipmap % (repeat :soal)))\n       (map #(clojure.set/map-invert %))))&quot;, :offset 325, :ns &quot;zenzen.core&quot;} {:command &quot;(def amir\n  (-&gt;&gt; \&quot;./resources/DN\&quot;\n       (get-path)\n       (filter #(= 7 ((frequencies %) \\/)))\n       (map #(coba %))\n       (map #(string/join \&quot; \&quot; (remove string/blank? %)))\n       (map vector)                                         ;;baal\n       ;;(map #(zipmap % (repeat :soal)))\n       ;;(map #(clojure.set/map-invert %))\n       ))\n\n(def budi (-&gt;&gt;\n            (get-path \&quot;./resources/DN\&quot;)\n            (map #(clojure.string/split % #\&quot;/\&quot;))\n            (map #(drop 2 %))\n            (filter #(= (count %) 6))\n            ;; (map #(zipmap % '(:subjek :topik :subtopik :kompetensi :indikator :dokumen)))\n            ;; (map #(clojure.set/map-invert %))\n            ))&quot;, :offset 667, :ns &quot;zenzen.core&quot;} {:command &quot;(def amir\n  (-&gt;&gt; \&quot;./resources/DN\&quot;\n       (get-path)\n       (filter #(= 7 ((frequencies %) \\/)))\n       (map #(coba %))\n       (map #(string/join \&quot; \&quot; (remove string/blank? %)))\n       (map vector)                                         ;;baal\n       (map #(zipmap % (repeat :soal)))\n       (map #(clojure.set/map-invert %))\n       ))\n\n(def budi (-&gt;&gt;\n            (get-path \&quot;./resources/DN\&quot;)\n            (map #(clojure.string/split % #\&quot;/\&quot;))\n            (map #(drop 2 %))\n            (filter #(= (count %) 6))\n            (map #(zipmap % '(:subjek :topik :subtopik :kompetensi :indikator :dokumen)))\n            (map #(clojure.set/map-invert %))\n            ))&quot;, :offset 657, :ns &quot;zenzen.core&quot;} {:command &quot;(map list budi amir)&quot;, :offset 20, :ns &quot;zenzen.core&quot;} {:command &quot;(def amir\n  (-&gt;&gt; \&quot;./resources/DN\&quot;\n       (get-path)\n       (filter #(= 7 ((frequencies %) \\/)))\n       (map #(coba %))\n       (map #(string/join \&quot; \&quot; (remove string/blank? %)))\n       (map vector)\n       ;;(map #(zipmap % (repeat :soal)))\n       ;;(map #(clojure.set/map-invert %))\n       ))\n\n(def budi (-&gt;&gt;\n            (get-path \&quot;./resources/DN\&quot;)\n            (map #(clojure.string/split % #\&quot;/\&quot;))\n            (map #(drop 2 %))\n            (filter #(= (count %) 6))\n            ;;(map #(zipmap % '(:subjek :topik :subtopik :kompetensi :indikator :dokumen)))\n            ;;(map #(clojure.set/map-invert %))\n            ))&quot;, :offset 618, :ns &quot;zenzen.core&quot;} {:command &quot;(concat budi amir)&quot;, :offset 18, :ns &quot;zenzen.core&quot;} {:command &quot;(distinct concat budi amir)&quot;, :offset 27, :ns &quot;zenzen.core&quot;} {:command &quot;(flatten budi amir)&quot;, :offset 19, :ns &quot;zenzen.core&quot;} {:command &quot;(def amir\n  (-&gt;&gt; \&quot;./resources/DN\&quot;\n       (get-path)\n       (filter #(= 7 ((frequencies %) \\/)))\n       (map #(coba %))\n       (map #(string/join \&quot; \&quot; (remove string/blank? %)))\n       (map vector)\n       (map #(zipmap % (repeat :soal)))\n       (map #(clojure.set/map-invert %))\n       ))\n\n(def budi (-&gt;&gt;\n            (get-path \&quot;./resources/DN\&quot;)\n            (map #(clojure.string/split % #\&quot;/\&quot;))\n            (map #(drop 2 %))\n            (filter #(= (count %) 6))\n            (map #(zipmap % '(:subjek :topik :subtopik :kompetensi :indikator :dokumen)))\n            (map #(clojure.set/map-invert %))\n            ))&quot;, :offset 610, :ns &quot;zenzen.core&quot;} {:command &quot;(merge budi amir)&quot;, :offset 17, :ns &quot;zenzen.core&quot;} {:command &quot;(map merge budi amir)&quot;, :offset 21, :ns &quot;zenzen.core&quot;} {:command &quot;\n(def finally\n  (map merge budi amir))&quot;, :offset 38, :ns &quot;zenzen.core&quot;} {:command &quot;(defn write-dataset-edn! [\&quot;data.clj\&quot; finally]\n  (with-open [w (clojure.java.io/writer out-file)]\n    (binding [*out* w]\n      (clojure.pprint/write raw-dataset-map))))&quot;, :offset 167, :ns &quot;zenzen.core&quot;} {:command &quot;finally&quot;, :offset 7, :ns &quot;zenzen.core&quot;} {:command &quot;(def list_of_map\n  (map merge budi amir))&quot;, :offset 41, :ns &quot;zenzen.core&quot;} {:command &quot;(write-dataset-edn! \&quot;data.clj\&quot; list_of_map)&quot;, :offset 43, :ns &quot;zenzen.core&quot;} {:command &quot;(use 'clojure.java.io)\n(require '[clojure.string :as string])\n(require '[clojure.edn :as edn])\n\n;; find . -name '.DS_Store' -type f -delete\n\n(def asa\n  (-&gt;&gt; \&quot;resources/Seal\&quot;\n       clojure.java.io/file\n       .list\n       seq\n       ))\n\n;;(seq (.list (clojure.java.io/file \&quot;resources/Seal\&quot;)))\n(def a\n  \&quot;./resources/DN/Elf/Darkness/Mara/black mara/Argenta.txt\&quot;)\n\n(def b\n  \&quot;./resources\&quot;)\n\n;; problem\n(def c\n  [\&quot;Master Sorceress Stella is an experienced Sorceress who resides in Saint Haven. She has great interest in real estate investment, but hasn't made much profit from it.\&quot;\n   \&quot;\&quot;\n   \&quot;She is always conducting strange experiments that annoy others around her. \&quot;])\n\n(string/join \&quot; \&quot; (remove string/blank? c))\n\n;; bikin map soal\n(def value\n  (-&gt;&gt; \&quot;./resources/DN\&quot;\n       (get-path)\n       (filter #(= 7 ((frequencies %) \\/)))\n       (map #(coba %))\n       (map #(string/join \&quot; \&quot; (remove string/blank? %)))\n       baal))\n\n;; mgetrik buat dapet map yg key soal\n(defn baal\n  [list_string]\n  (zipmap list_string (repeat :soal)))\n\n;;\n\n(defn get-path\n  [path]\n  (map #(.getPath %)\n       (file-seq (clojure.java.io/file path))))\n\n;; ambil data tiap file\n(-&gt;&gt; \&quot;./resources/DN\&quot;\n     (get-path)\n     (filter #(= 5 ((frequencies %) \\/)))\n     (map #(slurp %)))\n\n(defn read_txt\n  [full_path]\n  (with-open [rdr (reader full_path)]\n    (doseq [line (line-seq rdr)]\n      (println line))))\n\n(defn mapping\n  [main-path]\n  (-&gt;&gt;\n    (get-path main-path)\n    (map #(clojure.string/split % #\&quot;/\&quot;))\n    (map #(drop 2 %))\n    (filter #(= (count %) 4))\n    (map #(zipmap % '(:a :b :c :d)))\n    (map #(clojure.set/map-invert %))))\n\n(mapping \&quot;./resources/DN\&quot;)\n\n;; effective way\n(-&gt;&gt; \&quot;./resources/DN\&quot;\n     (get-path)\n     (filter #(= 7 ((frequencies %) \\/)))\n     )\n\n(defn coba\n  [a]\n  (-&gt; a\n      slurp\n      (clojure.string/replace #\&quot;\\d\&quot; \&quot;\&quot;)\n      clojure.string/split-lines)\n  )\n\n;; subjek, topik, subtopik, kompetensi, indikator, dokumen, soal\n\n(def amir\n  (-&gt;&gt; \&quot;./resources/DN\&quot;\n       (get-path)\n       (filter #(= 7 ((frequencies %) \\/)))\n       (map #(coba %))\n       (map #(string/join \&quot; \&quot; (remove string/blank? %)))\n       (map vector)\n       (map #(zipmap % (repeat :soal)))\n       (map #(clojure.set/map-invert %))\n       ))\n\n(def budi (-&gt;&gt;\n            (get-path \&quot;./resources/DN\&quot;)\n            (map #(clojure.string/split % #\&quot;/\&quot;))\n            (map #(drop 2 %))\n            (filter #(= (count %) 6))\n            (map #(zipmap % '(:subjek :topik :subtopik :kompetensi :indikator :dokumen)))\n            (map #(clojure.set/map-invert %))\n            ))\n\n(def list_of_map\n  (map merge budi amir))\n\n\n(defn write-dataset-edn! [out-file raw-dataset-map]\n  (with-open [w (clojure.java.io/writer out-file)]\n    (binding [*out* w]\n      (clojure.pprint/write raw-dataset-map))))\n&quot;, :offset 2753, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt; \&quot;./resources\&quot;\n     (get-path))&quot;, :offset 35, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt; \&quot;./resources\&quot;\n     (get-path)\n     (filter #(= 7 ((frequencies %) \\/))))&quot;, :offset 77, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt; \&quot;./resources\&quot;\n     (get-path)\n     (map #(clojure.string/split $ #\&quot;/\&quot;)))&quot;, :offset 77, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt; \&quot;./resources\&quot;\n     (get-path)\n     (map #(clojure.string/split % #\&quot;/\&quot;)))&quot;, :offset 77, :ns &quot;zenzen.core&quot;} {:command &quot;(write-dataset-edn! \&quot;data.edn\&quot; list_of_map)&quot;, :offset 43, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt;\n  list_of_map\n  )&quot;, :offset 22, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt;\n  list_of_map\n  sort-by :dokumen)&quot;, :offset 38, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt;\n  list_of_map\n  sort-by (:dokumen))&quot;, :offset 40, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt;\n  list_of_map\n  sort-by #(:dokumen))&quot;, :offset 41, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt;\n  list_of_map\n  sort-by #(:dokumen %))&quot;, :offset 43, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt;\n  list_of_map\n  sort-by #(:dokumen ) %)&quot;, :offset 44, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt;\n  list_of_map\n  (sort-by :soal))&quot;, :offset 37, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt;\n  list_of_map\n  (sort-by :dokumen))&quot;, :offset 40, :ns &quot;zenzen.core&quot;} {:command &quot;(def budi (-&gt;&gt;\n            (get-path \&quot;./resources/DN\&quot;)\n            (map #(clojure.string/split % #\&quot;/\&quot;))\n            (map #(drop 2 %))\n            (filter #(= (count %) 6))\n            (map #(zipmap % '(:subjek :topik :subtopik :kompetensi :indikator :dokumen)))\n            (map #(clojure.set/map-invert %))\n            ))&quot;, :offset 322, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt;\n            (get-path \&quot;./resources/DN\&quot;)\n            (map #(clojure.string/split % #\&quot;/\&quot;))\n            (map #(drop 2 %))\n            (filter #(= (count %) 6))\n            (map #(clojure.string/lower-case %)))&quot;, :offset 211, :ns &quot;zenzen.core&quot;} {:command &quot;a&quot;, :offset 1, :ns &quot;zenzen.core&quot;} {:command &quot;b&quot;, :offset 1, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt;\n            (get-path \&quot;./resources\&quot;)\n            (clojure.string/lower-case)\n            (map #(clojure.string/split % #\&quot;/\&quot;))\n            (map #(drop 2 %))\n            (filter #(= (count %) 6)))&quot;, :offset 199, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt;\n            (get-path \&quot;./resources\&quot;)\n            (map #(clojure.string/split % #\&quot;/\&quot;))\n            (map #(drop 2 %))\n            (filter #(= (count %) 6)))&quot;, :offset 159, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt;\n            (get-path \&quot;./resources\&quot;)\n            (map #(clojure.string/split % #\&quot;/\&quot;))\n            (map #(drop 2 %))\n            (filter #(= (count %) 6))\n            (map #(clojure.sring/lower-case %)))&quot;, :offset 207, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt;\n            (get-path \&quot;./resources\&quot;)\n            (map #(clojure.string/split % #\&quot;/\&quot;))\n            (map #(drop 2 %))\n            (filter #(= (count %) 6))\n            (map #(clojure.string/lower-case %)))&quot;, :offset 208, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt;\n  \&quot;./resources\&quot;\n  get-path\n  )&quot;, :offset 35, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt;\n  \&quot;./resources\&quot;\n  get-path\n  (filter #(= 7 ((frequencies %) \\/ ))))&quot;, :offset 72, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt;\n  \&quot;./resources\&quot;\n  get-path\n  (filter #(= 7 ((frequencies %) \\/ )))\n  clojure.string/lower-case)&quot;, :offset 100, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt;\n  \&quot;./resources\&quot;\n  get-path\n  (clojure.string/lower-case))&quot;, :offset 62, :ns &quot;zenzen.core&quot;} {:command &quot;(apply clojure.string/lower-casr c)&quot;, :offset 35, :ns &quot;zenzen.core&quot;} {:command &quot;(reduce clojure.string/lower-casr c)&quot;, :offset 36, :ns &quot;zenzen.core&quot;} {:command &quot;(reduce clojure.string/lower-case c)&quot;, :offset 36, :ns &quot;zenzen.core&quot;} {:command &quot;(apply clojure.string/lower-case c)&quot;, :offset 35, :ns &quot;zenzen.core&quot;} {:command &quot;(apply (clojure.string/lower-case c))&quot;, :offset 37, :ns &quot;zenzen.core&quot;} {:command &quot;(clojure.string/lower-case c)&quot;, :offset 29, :ns &quot;zenzen.core&quot;} {:command &quot;(str (clojure.string/lower-case c))&quot;, :offset 35, :ns &quot;zenzen.core&quot;} {:command &quot;(into [] (clojure.string/lower-case c))&quot;, :offset 39, :ns &quot;zenzen.core&quot;} {:command &quot;(list (clojure.string/lower-case c))&quot;, :offset 36, :ns &quot;zenzen.core&quot;} {:command &quot;c&quot;, :offset 1, :ns &quot;zenzen.core&quot;} {:command &quot;(clojure.string/lower-case budi)&quot;, :offset 32, :ns &quot;zenzen.core&quot;} {:command &quot;amir&quot;, :offset 4, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt;\n            (get-path \&quot;./resources/DN\&quot;)\n            (map #(clojure.string/split % #\&quot;/\&quot;))\n            (map #(drop 2 %))\n            (filter #(= (count %) 6)))&quot;, :offset 162, :ns &quot;zenzen.core&quot;} {:command &quot;(def d (\&quot;DN\&quot; \&quot;Elf\&quot; \&quot;Darkness\&quot; \&quot;Mara\&quot; \&quot;black mara\&quot; \&quot;Argenta.txt\&quot;))&quot;, :offset 65, :ns &quot;zenzen.core&quot;} {:command &quot;(def d 10)&quot;, :offset 10, :ns &quot;zenzen.core&quot;} {:command &quot;(def d '(\&quot;DN\&quot; \&quot;Elf\&quot; \&quot;Darkness\&quot; \&quot;Mara\&quot; \&quot;black mara\&quot; \&quot;Argenta.txt\&quot;))&quot;, :offset 66, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt;\n  d\n  (clojure.string/lower-case))&quot;, :offset 39, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt;\n  (get-path \&quot;./resources/DN\&quot;)\n  (map #(clojure.string/split % #\&quot;/\&quot;))\n  (map #(drop 2 %))\n  (filter #(= (count %) 6))\n  (map #(clojrue.string/lower-case %)))&quot;, :offset 161, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt;\n  (get-path \&quot;./resources/DN\&quot;)\n  (map #(clojure.string/split % #\&quot;/\&quot;))\n  (map #(drop 2 %))\n  (filter #(= (count %) 6))\n  (map #(clojur.string/lower-case %)))&quot;, :offset 160, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt;\n  (get-path \&quot;./resources/DN\&quot;)\n  (map #(clojure.string/split % #\&quot;/\&quot;))\n  (map #(drop 2 %))\n  (filter #(= (count %) 6))\n  (map #(clojure.string/lower-case %)))&quot;, :offset 161, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt;\n  (get-path \&quot;./resources/DN\&quot;)\n  (map #(clojure.string/split % #\&quot;/\&quot;))\n  (map #(drop 2 %))\n  (filter #(= (count %) 6)))&quot;, :offset 122, :ns &quot;zenzen.core&quot;} {:command &quot;d&quot;, :offset 1, :ns &quot;zenzen.core&quot;} {:command &quot;(clojure.string/lower-case d)&quot;, :offset 29, :ns &quot;zenzen.core&quot;} {:command &quot;(clojure.string/lower-case \&quot;DN\&quot; \&quot;Elf\&quot; \&quot;Darkness\&quot; \&quot;Mara\&quot; \&quot;black mara\&quot; \&quot;Argenta.txt\&quot;)&quot;, :offset 83, :ns &quot;zenzen.core&quot;} {:command &quot;(use 'clojure.java.io)\n(require '[clojure.string :as string])\n(require '[clojure.edn :as edn])\n\n;; find . -name '.DS_Store' -type f -delete\n\n(def asa\n  (-&gt;&gt; \&quot;resources/Seal\&quot;\n       clojure.java.io/file\n       .list\n       seq\n       ))\n\n;;(seq (.list (clojure.java.io/file \&quot;resources/Seal\&quot;)))\n(def a\n  \&quot;./resources/DN/Elf/Darkness/Mara/black mara/Argenta.txt\&quot;)\n\n(def b\n  \&quot;./resources\&quot;)\n\n;; problem\n(def c\n  [\&quot;Master Sorceress Stella is an experienced Sorceress who resides in Saint Haven. She has great interest in real estate investment, but hasn't made much profit from it.\&quot;\n   \&quot;\&quot;\n   \&quot;She is always conducting strange experiments that annoy others around her. \&quot;])\n\n(string/join \&quot; \&quot; (remove string/blank? c))\n\n;; bikin map soal\n(def value\n  (-&gt;&gt; \&quot;./resources/DN\&quot;\n       (get-path)\n       (filter #(= 7 ((frequencies %) \\/)))\n       (map #(coba %))\n       (map #(string/join \&quot; \&quot; (remove string/blank? %)))\n       baal))\n\n;; mgetrik buat dapet map yg key soal\n(defn baal\n  [list_string]\n  (zipmap list_string (repeat :soal)))\n\n;;\n\n(defn get-path\n  [path]\n  (map #(.getPath %)\n       (file-seq (clojure.java.io/file path))))\n\n;; ambil data tiap file\n(-&gt;&gt; \&quot;./resources/DN\&quot;\n     (get-path)\n     (filter #(= 5 ((frequencies %) \\/)))\n     (map #(slurp %)))\n\n(defn read_txt\n  [full_path]\n  (with-open [rdr (reader full_path)]\n    (doseq [line (line-seq rdr)]\n      (println line))))\n\n(defn mapping\n  [main-path]\n  (-&gt;&gt;\n    (get-path main-path)\n    (map #(clojure.string/split % #\&quot;/\&quot;))\n    (map #(drop 2 %))\n    (filter #(= (count %) 4))\n    (map #(zipmap % '(:a :b :c :d)))\n    (map #(clojure.set/map-invert %))))\n\n(mapping \&quot;./resources/DN\&quot;)\n\n;; effective way\n(-&gt;&gt; \&quot;./resources/DN\&quot;\n     (get-path)\n     (filter #(= 7 ((frequencies %) \\/)))\n     )\n\n(defn coba\n  [a]\n  (-&gt; a\n      slurp\n      (clojure.string/replace #\&quot;\\d\&quot; \&quot;\&quot;)\n      clojure.string/split-lines)\n  )\n\n;; subjek, topik, subtopik, kompetensi, indikator, dokumen, soal\n\n(def amir\n  (-&gt;&gt; \&quot;./resources/DN\&quot;\n       (get-path)\n       (filter #(= 7 ((frequencies %) \\/)))\n       (map #(coba %))\n       (map #(string/join \&quot; \&quot; (remove string/blank? %)))\n       (map vector)\n       (map #(zipmap % (repeat :soal)))\n       (map #(clojure.set/map-invert %))\n       ))\n\n(def budi (-&gt;&gt;\n            (get-path \&quot;./resources/DN\&quot;)\n            (map #(clojure.string/split % #\&quot;/\&quot;))\n            (map #(drop 2 %))\n            (filter #(= (count %) 6))\n            (map #(zipmap % '(:subjek :topik :subtopik :kompetensi :indikator :dokumen)))\n            (map #(clojure.set/map-invert %))\n            ))\n\n(def list_of_map\n  (map merge budi amir))\n\n\n(defn write-dataset-edn! [out-file raw-dataset-map]\n  (with-open [w (clojure.java.io/writer out-file)]\n    (binding [*out* w]\n      (clojure.pprint/write raw-dataset-map))))&quot;, :offset 2752, :ns &quot;zenzen.core&quot;} {:command &quot;(def amir\n  (-&gt;&gt; \&quot;./resources\&quot;\n       (get-path)\n       (filter #(= 7 ((frequencies %) \\/)))\n       (map #(coba %))\n       (map #(string/join \&quot; \&quot; (remove string/blank? %)))\n       (map vector)\n       (map #(zipmap % (repeat :soal)))\n       (map #(clojure.set/map-invert %))\n       ))\n\n(def budi (-&gt;&gt;\n            (get-path \&quot;./resources\&quot;)\n            (map #(clojure.string/split % #\&quot;/\&quot;))\n            (map #(drop 2 %))\n            (filter #(= (count %) 6))\n            (map #(zipmap % '(:subjek :topik :subtopik :kompetensi :indikator :dokumen)))\n            (map #(clojure.set/map-invert %))\n            ))\n\n(def list_of_map\n  (map merge budi amir))\n\n\n(defn write-dataset-edn! [out-file raw-dataset-map]\n  (with-open [w (clojure.java.io/writer out-file)]\n    (binding [*out* w]\n      (clojure.pprint/write raw-dataset-map))))&quot;, :offset 823, :ns &quot;zenzen.core&quot;} {:command &quot;list_of&quot;, :offset 7, :ns &quot;zenzen.core&quot;} {:command &quot;list_of_map&quot;, :offset 11, :ns &quot;zenzen.core&quot;} {:command &quot;(list_of_map :subjek)&quot;, :offset 21, :ns &quot;zenzen.core&quot;} {:command &quot;budI&quot;, :offset 4, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt;\n  (get-path \&quot;./resources\&quot;))&quot;, :offset 32, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt;\n  (get-path \&quot;./resources\&quot;)\n  (map #(clojure.string/split % #\&quot;/\&quot;)))&quot;, :offset 71, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt;\n  (get-path \&quot;./resources\&quot;)\n  (map #(clojure.string/split % #\&quot;/\&quot;))\n  (map #(drop 2 %)))&quot;, :offset 91, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt;\n  (get-path \&quot;./resources\&quot;)\n  (map #(clojure.string/split % #\&quot;/\&quot;))\n  (map #(drop 2 %))\n  (fiter #(= (count %) 6)))&quot;, :offset 118, :ns &quot;zenzen.core&quot;} {:command &quot;(def amir\n  (-&gt;&gt; \&quot;./resources\&quot;\n       (get-path)\n       (filter #(= 7 ((frequencies %) \\/)))\n       (map #(coba %))\n       (map #(string/join \&quot; \&quot; (remove string/blank? %)))\n       (map vector)\n       (map #(zipmap % (repeat :soal)))\n       (map #(clojure.set/map-invert %))\n       ))\n\n(def budi (-&gt;&gt;\n            (get-path \&quot;./resources\&quot;)\n            (map #(clojure.string/split % #\&quot;/\&quot;))\n            (map #(drop 2 %))\n            (filter #(= (count %) 6))\n            (map #(zipmap % '(:subjek :topik :subtopik :kompetensi :indikator :dokumen)))\n            (map #(clojure.set/map-invert %))\n            ))\n\n(def list_of_map\n  (map merge budi amir))\n\n\n(defn write-dataset-edn! [out-file raw-dataset-map]\n  (with-open [w (clojure.java.io/writer out-file)]\n    (binding [*out* w]\n      (clojure.pprint/write raw-dataset-map))))\n\n&quot;, :offset 825, :ns &quot;zenzen.core&quot;} {:command &quot;budi&quot;, :offset 4, :ns &quot;zenzen.core&quot;} {:command &quot;(map budi :dokumen)&quot;, :offset 19, :ns &quot;zenzen.core&quot;} {:command &quot;{:a \&quot;a\&quot;, :b 2}&quot;, :offset 14, :ns &quot;zenzen.core&quot;} {:command &quot;(def memap {:a \&quot;a\&quot;, b 2})&quot;, :offset 25, :ns &quot;zenzen.core&quot;} {:command &quot;memap&quot;, :offset 5, :ns &quot;zenzen.core&quot;} {:command &quot;(memap :a)&quot;, :offset 10, :ns &quot;zenzen.core&quot;} {:command &quot;(map #(% :dokumen) budi)&quot;, :offset 24, :ns &quot;zenzen.core&quot;} {:command &quot;(-&gt;&gt;\n  (get-path \&quot;./resources\&quot;)\n  (map #(clojure.string/split % #\&quot;/\&quot;))\n  (map #(drop 2 %))\n  (filter #(= (count %) 6)))&quot;, :offset 119, :ns &quot;zenzen.core&quot;} {:command &quot;(clojure.string/lower-case \&quot;SASA\&quot;)&quot;, :offset 34, :ns &quot;zenzen.core&quot;} {:command &quot;(clojure.string/lower-case (\&quot;SASA\&quot;))&quot;, :offset 36, :ns &quot;zenzen.core&quot;} {:command &quot;(clojure.string/lower-case '(\&quot;SASA\&quot;))&quot;, :offset 37, :ns &quot;zenzen.core&quot;} {:command &quot;(let [[a % b] '(\&quot;sasa\&quot; \&quot;au\&quot; \&quot;abu\&quot;)] a)&quot;, :offset 38, :ns &quot;zenzen.core&quot;} {:command &quot;(let [[a % b] '(\&quot;sasa\&quot; \&quot;au\&quot; \&quot;abu\&quot;)] b)&quot;, :offset 38, :ns &quot;zenzen.core&quot;} {:command &quot;(let [[a % b] '(\&quot;sasa\&quot; \&quot;au\&quot; \&quot;abu\&quot;)] &amp; b)&quot;, :offset 40, :ns &quot;zenzen.core&quot;} {:command &quot;(let [[a &amp; b] '(\&quot;sasa\&quot; \&quot;au\&quot; \&quot;abu\&quot;)] &amp; b)&quot;, :offset 40, :ns &quot;zenzen.core&quot;} {:command &quot;(let [[a &amp; b] '(\&quot;sasa\&quot; \&quot;au\&quot; \&quot;abu\&quot;)] b)&quot;, :offset 38, :ns &quot;zenzen.core&quot;} {:command &quot;(cons \&quot;abu\&quot; '())&quot;, :offset 16, :ns &quot;zenzen.core&quot;}], :remote []}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager">
    <configuration name="Unnamed" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false" nameIsGenerated="true">
      <module name="zenzen" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <module name="" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="0" />
      <module name="" />
      <method v="2" />
    </configuration>
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="0136d24e-4785-4314-a628-69c5c3d711e6" name="Default Changelist" comment="" />
      <created>1555928694217</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1555928694217</updated>
    </task>
    <servers />
  </component>
  <component name="ToolWindowManager">
    <frame x="0" y="0" width="1440" height="900" extended-state="0" />
    <editor active="true" />
    <layout>
      <window_info active="true" content_ui="combo" id="Project" order="0" visible="true" weight="0.17811158" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info id="Image Layers" order="2" />
      <window_info id="Designer" order="3" />
      <window_info id="UI Designer" order="4" />
      <window_info id="Capture Tool" order="5" />
      <window_info id="Favorites" order="6" side_tool="true" />
      <window_info anchor="bottom" id="Message" order="0" />
      <window_info anchor="bottom" id="Find" order="1" />
      <window_info anchor="bottom" id="Run" order="2" />
      <window_info anchor="bottom" id="Debug" order="3" weight="0.4" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="6" />
      <window_info anchor="bottom" id="Terminal" order="7" />
      <window_info anchor="bottom" id="Event Log" order="8" side_tool="true" weight="0.32729805" />
      <window_info anchor="bottom" id="Version Control" order="9" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
      <window_info anchor="right" id="Palette" order="3" />
      <window_info anchor="right" id="Maven" order="4" />
      <window_info anchor="right" id="Theme Preview" order="5" />
      <window_info anchor="right" id="REPL" order="6" sideWeight="0.94986075" side_tool="true" visible="true" weight="0.3297568" />
      <window_info anchor="right" id="Leiningen" order="7" sideWeight="0.050139274" weight="0.3297568" />
      <window_info anchor="right" id="Capture Analysis" order="8" />
      <window_info anchor="right" id="Palette&#9;" order="9" />
    </layout>
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$PROJECT_DIR$/resources/DN/Elf/Darkness/Mara/black mara/Argenta.txt">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="42">
          <caret line="2" column="1" selection-start-line="2" selection-start-column="1" selection-end-line="2" selection-end-column="1" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/data.clj" />
    <entry file="file://$PROJECT_DIR$/src/zenzen/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="125">
          <caret line="107" column="22" selection-start-line="107" selection-start-column="22" selection-end-line="107" selection-end-column="22" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/data.edn">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
  </component>
  <component name="masterDetails">
    <states>
      <state key="ProjectJDKs.UI">
        <settings>
          <last-edited>12</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
    </states>
  </component>
</project>